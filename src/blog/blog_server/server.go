package main

import (
	"context"
	"log"
	"net"
	"os"
	"os/signal"
	"time"

	"github.com/royzh/grpc/src/blog/blogpb"

	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
)

// Globablly accessible collection
var collection *mongo.Collection

// Define item type to match what we're putting into db
// The stuff that's surrounded by backticks is how the data and fields
// are formatted and named in the database
type blogItem struct {
	ID       primitive.ObjectID `bson:"_id,omitempty"`
	AuthorID string             `bson:"author_id"`
	Content  string             `bson:"content"`
	Title    string             `bson:"title"`
}

type server struct{}

func (*server) CreateBlog(ctx context.Context, req *blogpb.CreateBlogRequest) (*blogpb.CreateBlogResponse, error) {
	log.Println("Create blog request called")
	blog := req.GetBlog()
	data := blogItem{
		AuthorID: blog.GetAuthorId(),
		Content:  blog.GetContent(),
		Title:    blog.GetTitle(),
	}
	_, err := collection.InsertOne(context.Background(), data)
	if err != nil {
		log.Println("Insert failed")
		return nil, status.Error(codes.Internal, "Internal Error")
	}
	res := &blogpb.CreateBlogResponse{
		Blog: blog,
	}
	return res, nil
}

func main() {
	log.Println("Connecting...")

	// setup MongoDB
	log.Println("Connecting to MongoDB")
	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()
	client, err := mongo.Connect(ctx, options.Client().ApplyURI(
		"mongodb+srv://dev:DjGQh4BwrZlVrnZV@cluster0.zrbnr.mongodb.net/?retryWrites=true&w=majority",
	))
	if err != nil {
		log.Fatal(err)
	}

	collection = client.Database("grpcdb").Collection("blog")
	// Set up a server
	// Listen on port
	// 50051 is the default port for grpc
	lis, err := net.Listen("tcp", "0.0.0.0:50051")
	if err != nil {
		log.Fatalln("Failed to listen", err)
	}
	log.Println("Connection established")

	// New server
	s := grpc.NewServer()
	// Register the service
	// This is defined in the autogenerated code
	// Right now we're just using an empty server struct, we'll add stuff to it later
	blogpb.RegisterBlogServiceServer(s, &server{})

	// Start the server in a seperate goroutine
	go func() {
		log.Println("Server established. Accepting requests.")
		if err := s.Serve(lis); err != nil {
			log.Fatalln("Failed to serve", err)
		}
	}()

	// Wait for ctrl + c to exit
	ch := make(chan os.Signal, 1)
	signal.Notify(ch, os.Interrupt)

	// Block until signal is received
	<-ch
	log.Println("Stopping server")
	s.Stop()
	log.Println("Closing listener")
	lis.Close()
	log.Println("Closing MongoDB connection")
	client.Disconnect(context.TODO())
	log.Println("End of Program")
}
