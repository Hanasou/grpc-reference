package main

import (
	"context"
	"io"
	"log"
	"net"
	"strconv"

	"github.com/royzh/grpc/src/greet/greetpb"

	"google.golang.org/grpc"
)

// we need our server to implement our service interface
type server struct {
}

// implementing an interface is implicit
// Look at GreetServiceServer to see how this is defined
func (*server) Greet(ctx context.Context, req *greetpb.GreetRequest) (*greetpb.GreetResponse, error) {
	log.Println("Greet function invoked")
	// Get the greeting message
	// From that we can get the first name
	// We want to do this through the api from our pregenerated code
	firstName := req.GetGreeting().GetFirstName()
	result := "Hello " + firstName
	// Build our response
	response := &greetpb.GreetResponse{
		Result: result,
	}
	// Return the response
	return response, nil
}

// Look at GreetServiceServer to see how this is defined
func (*server) GreetManyTimes(req *greetpb.GreetManyTimesRequest, stream greetpb.GreetService_GreetManyTimesServer) error {
	log.Println("Greet Many Times Called")
	firstName := req.GetGreeting().GetFirstName()
	// Running this over a loop since we're sending multiple responses
	for i := 0; i < 10; i++ {
		result := "Hello " + firstName + " number " + strconv.Itoa(i)
		res := &greetpb.GreetManyTimesResponse{
			Result: result,
		}
		// Call Send on our stream parameter
		stream.Send(res)
	}
	return nil
}

func (*server) LongGreet(stream greetpb.GreetService_LongGreetServer) error {
	log.Println("LongGreet called")
	// We're going to be appending stuff to this result string
	result := "Hello "
	// We're receiving a stream from the client
	// Call Recv() as many times as possible
	for {
		req, err := stream.Recv()
		if err == io.EOF {
			// Reached the end of the stream
			// Send and close when we're done
			res := &greetpb.LongGreetResponse{
				Result: result,
			}
			// This function returns an error
			return stream.SendAndClose(res)
		}
		if err != nil {
			log.Fatalln("Error while reading client stream", err)
			return err
		}

		firstName := req.GetGreeting().GetFirstName()
		result += firstName + "! "
	}
}

func (*server) GreetEveryone(stream greetpb.GreetService_GreetEveryoneServer) error {
	log.Println("Greet everyone called")

	for {
		req, err := stream.Recv()
		if err == io.EOF {
			return nil
		}
		if err != nil {
			log.Fatalln("Get me out of here", err)
			return err
		}
		firstName := req.GetGreeting().GetFirstName()
		result := "Hello " + firstName
		res := &greetpb.GreetEveryoneResponse{
			Result: result,
		}
		err = stream.Send(res)
		if err != nil {
			log.Fatalln("Error while sending data", err)
			return err
		}
	}
}

func main() {
	log.Println("Connecting...")

	// Set up a server
	// Listen on port
	// 50051 is the default port for grpc
	lis, err := net.Listen("tcp", "0.0.0.0:50051")
	if err != nil {
		log.Fatalln("Failed to listen", err)
	}
	log.Println("Connection established")

	// New server
	s := grpc.NewServer()
	// Register the service
	// This is defined in the autogenerated code
	// Right now we're just using an empty server struct, we'll add stuff to it later
	greetpb.RegisterGreetServiceServer(s, &server{})
	log.Println("Server established. Accepting requests.")
	if err := s.Serve(lis); err != nil {
		log.Fatalln("Failed to serve", err)
	}
}
